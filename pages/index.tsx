import React, { useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { add } from 'date-fns'
import Slider from "react-slick";

const Home: NextPage = () => {
	const [date, setDate] = useState<string>("");
	const [showResults, setShowResults] = useState<boolean>(false);
	const [badBD, setBadBD] = useState<boolean>(false);
	const [images, setImages] = useState<string[]>([]);
	const [isBD, setIsBD] = useState<boolean>(false);
	const [sending, setSending] = useState<boolean>(false);
	const [noBDDay, setNoBDDay] = useState<string>("");

	const handleSubmit = async () => {
		setSending(true);
		const requestDate = getRequestDate(date);
		// console.log(requestDate);

		setBadBD(!requestDate ? true : false);

		if (requestDate) {
			const images = await getImages(requestDate);
			if (images.length > 0) {
				setIsBD(true);
				const arrImages = getValuesByDateString(requestDate);
				setImages(images.map((item: any) => `https://epic.gsfc.nasa.gov/archive/natural/${arrImages.year}/${arrImages.month}/${arrImages.day}/png/${item.image}.png`))
			} else {
				setIsBD(false);
				let finish = false;
				let dateToCheck = requestDate;
				while (!finish) {
					let arrDate = getValuesByDateString(dateToCheck);
					// console.log("Day: ", arrDate);
					let nextDay = add(new Date(parseInt(arrDate.year), parseInt(arrDate.month) - 1, parseInt(arrDate.day), 0, 0, 0), {
						years: 0,
						months: 0,
						weeks: 0,
						days: 1,
						hours: 0,
						minutes: 0,
						seconds: 0,
					});
					// console.log("nextDay: ", nextDay);
					let nextDayValues = getValuesByDate(nextDay);
					dateToCheck = `${nextDayValues.year}-${(nextDayValues.month) >= 10 ? nextDayValues.month : `0${nextDayValues.month}`}-${(nextDayValues.day >= 10) ? nextDayValues.day : `0${nextDayValues.day}`}`;
					let imagesNextDay = await getImages(dateToCheck);
					if (imagesNextDay.length > 0) {
						setImages(imagesNextDay.map((item: any) => `https://epic.gsfc.nasa.gov/archive/natural/${nextDayValues.year}/${(nextDayValues.month) >= 10 ? nextDayValues.month : `0${nextDayValues.month}`}/${(nextDayValues.day >= 10) ? nextDayValues.day : `0${nextDayValues.day}`}/png/${item.image}.png`))
						setNoBDDay(dateToCheck);
						finish = true;
					}
				}
			}
		}

		setShowResults(true);
		setSending(false);
	}

	const getValuesByDateString = (date: string) => {
		const arrDate = date.split("-");
		return {
			year: arrDate[0],
			month: arrDate[1],
			day: arrDate[2]
		}
	}

	const getValuesByDate = (date: Date) => {
		return {
			year: date.getFullYear(),
			month: date.getMonth() + 1,
			day: date.getDate()
		}
	}


	const getRequestDate = (date: string) => {
		const today = getValuesByDate(new Date());
		const todayYear = today.year;
		const todayMonth = today.month;
		const todayDay = today.day;

		const arrDate = getValuesByDateString(date);
		const birthdayYear = arrDate.year;
		const birthdayMonth = arrDate.month;
		const birthdayDay = arrDate.day;

		if (parseInt(birthdayYear) > todayYear) return false;
		if (parseInt(birthdayYear) === todayYear && parseInt(birthdayMonth) > todayMonth) return false;
		if (parseInt(birthdayYear) === todayYear && parseInt(birthdayMonth) === todayMonth && parseInt(birthdayDay) > todayDay) return false;

		if (todayMonth > parseInt(birthdayMonth) || (todayMonth === parseInt(birthdayMonth) && todayDay > parseInt(birthdayDay))) {
			return `${todayYear}-${arrDate.month}-${arrDate.day}`
		} else {
			return `${todayYear - 1}-${arrDate.month}-${arrDate.day}`
		}
	}

	const getImages = async (date: string) => {
		const response = await fetch(`https://epic.gsfc.nasa.gov/api/natural/date/${date}`);
		return response.json();
	}

	const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		setDate(e.target.value);
	}

	const slickSettings = {
		dots: false,
		infinite: true,
		speed: 500,
		slidesToShow: 1,
		slidesToScroll: 1
	};

	return (
		<div className="">
			<Head>
				<title>Birthday Image Demo</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className='w-full px-6'>
				{!showResults ?
					<div className='w-full max-w-2xl mx-auto px-6 py-6 bg-white rounded-sm'>
						<p className='text-lg text-center text-gray-800'>Birthday</p>
						<div className='text-center py-4'>
							<input onChange={handleChange} value={date} type="date" />
						</div>
						<div className='w-full text-gray-400 text-sm text-center'>You must fill the date field properly!</div>
						<div className='text-center pt-6'>
							<button disabled={date === "" || sending} onClick={handleSubmit} className='bg-blue-800 text-white px-8 py-3 rounded-sm disabled:bg-blue-500 disabled:text-blue-300'>{!sending ? "Send" : <><svg className="animate-spin -ml-1 mr-1 -mt-1 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
								<circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
								<path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
							</svg> <span className='inline-block'>Sending</span></>}</button>
						</div>
					</div>
					:
					<div className='w-full max-w-2xl mx-auto px-6 py-6 bg-white rounded-sm'>
						<p onClick={() => setShowResults(false)} className='text-center text-gray-600 mb-6 cursor-pointer'>&larr; Back</p>
						{badBD ? <p className='text-red-600 text-center'>Wrong birthday! Did you born in the future?</p> : <div>
							{isBD ? <p className='text-green-600 text-sm text-center py-4'>Birthday photos!</p> : <p className='text-gray-600 text-sm text-center py-4'>No-birthday photos! <span className='text-sm font-semibold'>{noBDDay}</span></p>}
							<div className='relative w-full px-6'>
								<Slider {...slickSettings}>
									{images.map((item: string, index: number) => <div key={index} className='relative w-full'>
										<img className='w-full' src={item} alt="" />
									</div>)}
								</Slider>
							</div>
							<p className='mt-4 text-center text-sm'><span className='font-semibold'>{images.length}</span> images</p>
						</div>}
					</div>
				}
			</div>
		</div >
	)
}

export default Home
